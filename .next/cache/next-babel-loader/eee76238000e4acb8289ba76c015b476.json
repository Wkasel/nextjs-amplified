{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/rozar/Documents/todo-list/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport reducer from './reducer';\nimport { nanoid } from 'nanoid';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { getTodoList } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\nAPI.configure(config); // Should be a device id or a cognito user id but this will do\n\nvar MY_ID = nanoid();\n/*\nWith TS we create an Observable type to describe the return type of a GraphQL subscription.\nHopefully in future releases of aws-amplify we will have generic types for API.graphql that will make this un-necessary.\n*/\n\nApp.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var result;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return API.graphql(graphqlOperation(getTodoList, {\n            id: \"global\"\n          }));\n\n        case 3:\n          result = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.warn(_context.t0);\n          return _context.abrupt(\"return\", {\n            todos: []\n          });\n\n        case 10:\n          if (!result.errors) {\n            _context.next = 13;\n            break;\n          }\n\n          console.warn(\"Failed to fetch todolist. \", result.errors);\n          return _context.abrupt(\"return\", {\n            todos: []\n          });\n\n        case 13:\n          if (!(result.data.getTodoList !== null)) {\n            _context.next = 15;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            todos: result.data.getTodoList.todos.items\n          });\n\n        case 15:\n          _context.prev = 15;\n          _context.next = 18;\n          return API.graphql(graphqlOperation(createTodoList, {\n            input: {\n              id: \"global\",\n              createdAt: \"\".concat(Date.now())\n            }\n          }));\n\n        case 18:\n          _context.next = 23;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t1 = _context[\"catch\"](15);\n          console.warn(_context.t1);\n\n        case 23:\n          return _context.abrupt(\"return\", {\n            todos: []\n          });\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, null, [[0, 6], [15, 20]]);\n}));\n\nvar App = function App() {\n  _s();\n\n  // The reducer defined before\n  var _React$useReducer = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos: []\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var add = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var todo;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              todo = {\n                id: nanoid(),\n                name: state.currentTodo,\n                completed: false,\n                createdAt: \"\".concat(Date.now())\n              };\n              dispatch({\n                type: \"add\",\n                payload: todo\n              }); // Optimistic update\n\n              dispatch({\n                type: \"set-current\",\n                payload: \"\"\n              });\n              _context2.prev = 3;\n              _context2.next = 6;\n              return API.graphql(graphqlOperation(createTodo, {\n                input: _objectSpread(_objectSpread({}, todo), {}, {\n                  todoTodoListId: \"global\",\n                  userId: MY_ID\n                })\n              }));\n\n            case 6:\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](3);\n              // With revert on error\n              dispatch({\n                type: \"set-current\",\n                payload: todo.name\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 8]]);\n    }));\n\n    return function add() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var edit = function edit(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"update\",\n      payload: todo\n    });\n  };\n\n  var del = function del(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"delete\",\n      payload: todo\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"To Do List\")), __jsx(\"main\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      add(state.currentTodo);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: state.currentTodo,\n    onChange: function onChange(event) {\n      dispatch({\n        type: \"set-current\",\n        payload: event.target.value\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Add\")), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, state.todos.map(function (todo) {\n    return __jsx(\"li\", {\n      key: todo.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: todo.name,\n      onChange: function onChange(event) {\n        edit(_objectSpread(_objectSpread({}, todo), {}, {\n          name: event.target.value\n        }));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      onClick: function onClick() {\n        del(todo);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Delete\"));\n  }))));\n};\n\n_s(App, \"1Bw6bKvzyWez+q6bxBvJVSWhmYE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rozar/Documents/todo-list/pages/index.js"],"names":["React","reducer","nanoid","API","graphqlOperation","config","createTodo","getTodoList","onCreateTodo","configure","MY_ID","App","getInitialProps","graphql","id","result","console","warn","todos","errors","data","items","createTodoList","input","createdAt","Date","now","useReducer","currentTodo","state","dispatch","add","todo","name","completed","type","payload","todoTodoListId","userId","edit","del","event","preventDefault","target","value","map"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport reducer from './reducer'\nimport { nanoid } from 'nanoid'\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { getTodoList } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\n\nAPI.configure(config);\n// Should be a device id or a cognito user id but this will do\nconst MY_ID = nanoid();\n/*\nWith TS we create an Observable type to describe the return type of a GraphQL subscription.\nHopefully in future releases of aws-amplify we will have generic types for API.graphql that will make this un-necessary.\n*/\n\nApp.getInitialProps = async () => {\n  let result; /*: { data: GetTodoListQuery; errors: {}[] };*/\n  try {\n    // Fetch our list from the server\n    result = await API.graphql(graphqlOperation(getTodoList, { id: \"global\" }));\n  } catch (err) {\n    console.warn(err);\n    return { todos: [] };\n  }\n  if (result.errors) {\n    console.warn(\"Failed to fetch todolist. \", result.errors);\n    return { todos: [] };\n  }\n  if (result.data.getTodoList !== null) {\n    return { todos: result.data.getTodoList.todos.items };\n  }\n\n  try {\n    // And if it doesn't exist, create it\n    await API.graphql(\n      graphqlOperation(createTodoList, {\n        input: {\n          id: \"global\",\n          createdAt: `${Date.now()}`\n        }\n      })\n    );\n  } catch (err) {\n    console.warn(err);\n  }\n  return { todos: [] };\n};\n\nconst App = () => {\n  // The reducer defined before\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos: []\n  });\n  const add = async () => {\n    const todo = {\n      id: nanoid(),\n      name: state.currentTodo,\n      completed: false,\n      createdAt: `${Date.now()}`\n    };\n    dispatch({\n      type: \"add\",\n      payload: todo\n    });\n    // Optimistic update\n    dispatch({ type: \"set-current\", payload: \"\" });\n    try {\n      await API.graphql(\n        graphqlOperation(createTodo, {\n          input: { ...todo, todoTodoListId: \"global\", userId: MY_ID }\n        })\n      );\n    } catch (err) {\n      // With revert on error\n      dispatch({ type: \"set-current\", payload: todo.name });\n    }\n  };\n  const edit = (todo /*:Todo*/) => {\n    dispatch({ type: \"update\", payload: todo });\n  };\n  const del = (todo /*:Todo*/) => {\n    dispatch({ type: \"delete\", payload: todo });\n  };\n  return (\n    <>\n      <header>\n        <h2>To Do List</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={event => {\n            event.preventDefault();\n            add(state.currentTodo);\n          }}\n        >\n          <input\n            type=\"text\"\n            value={state.currentTodo}\n            onChange={event => {\n              dispatch({ type: \"set-current\", payload: event.target.value });\n            }}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ul>\n          {state.todos.map(todo => {\n            return (\n              <li key={todo.id}>\n                <input\n                  type={\"text\"}\n                  value={todo.name}\n                  onChange={event => {\n                    edit({ ...todo, name: event.target.value });\n                  }}\n                />\n                <button\n                  onClick={() => {\n                    del(todo);\n                  }}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}