{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport reducer from \"./reducer\";\nimport { nanoid } from \"nanoid\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../aws-exports\";\nimport { createTodo } from \"../graphql/mutations\";\nimport { onCreateTodo } from \"../graphql/subscriptions\";\nAPI.configure(config); // Should be a device id or a cognito user id but this will do\n\nvar MY_ID = nanoid();\n\nvar App = function App(_ref) {\n  var todos = _ref.todos;\n\n  // The reducer defined before\n  var _React$useReducer = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos: todos\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var listener = API.graphql(graphqlOperation(onCreateTodo));\n    var subscription = listener.subscribe(function (v) {\n      dispatch({\n        type: \"add\",\n        payload: v.value.data.onCreateTodo\n      });\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  var add = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var todo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              todo = {\n                id: nanoid(),\n                name: state.currentTodo\n              };\n              dispatch({\n                type: \"add\",\n                payload: todo\n              }); // Optimistic update\n\n              dispatch({\n                type: \"set-current\",\n                payload: \"\"\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return API.graphql(graphqlOperation(createTodo, {\n                input: _objectSpread({}, todo)\n              }));\n\n            case 6:\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              // With revert on error\n              dispatch({\n                type: \"set-current\",\n                payload: todo.name\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 8]]);\n    }));\n\n    return function add() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var edit = function edit(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"update\",\n      payload: todo\n    });\n  };\n\n  var del = function del(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"delete\",\n      payload: todo\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"header\", null, __jsx(\"h2\", null, \"To Do List\")), __jsx(\"main\", null, __jsx(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      add(state.currentTodo);\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: state.currentTodo,\n    onChange: function onChange(event) {\n      dispatch({\n        type: \"set-current\",\n        payload: event.target.value\n      });\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"ul\", null, state.todos.map(function (todo) {\n    return __jsx(\"li\", {\n      key: todo.id\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: todo.name,\n      onChange: function onChange(event) {\n        edit(_objectSpread(_objectSpread({}, todo), {}, {\n          name: event.target.value\n        }));\n      }\n    }), __jsx(\"button\", {\n      onClick: function onClick() {\n        del(todo);\n      }\n    }, \"Delete\"));\n  }))));\n};\n\nexport var __N_SSP = true;\nexport default App;","map":null,"metadata":{},"sourceType":"module"}