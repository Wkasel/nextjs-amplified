{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport reducer from \"./reducer\";\nimport { nanoid } from \"nanoid\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { listTodos } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\nAPI.configure(config); // Should be a device id or a cognito user id but this will do\n\nconst MY_ID = nanoid();\n\nconst App = ({\n  todos\n}) => {\n  // The reducer defined before\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos\n  });\n  React.useEffect(() => {\n    const listener = API.graphql(graphqlOperation(onCreateTodo));\n    const subscription = listener.subscribe(v => {\n      dispatch({\n        type: \"add\",\n        payload: v.value.data.onCreateTodo\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const add = async () => {\n    const todo = {\n      id: nanoid(),\n      name: state.currentTodo\n    };\n    dispatch({\n      type: \"add\",\n      payload: todo\n    }); // Optimistic update\n\n    dispatch({\n      type: \"set-current\",\n      payload: \"\"\n    });\n\n    try {\n      await API.graphql(graphqlOperation(createTodo, {\n        input: _objectSpread({}, todo)\n      }));\n    } catch (err) {\n      // With revert on error\n      dispatch({\n        type: \"set-current\",\n        payload: todo.name\n      });\n    }\n  };\n\n  const edit = (todo\n  /*:Todo*/\n  ) => {\n    dispatch({\n      type: \"update\",\n      payload: todo\n    });\n  };\n\n  const del = (todo\n  /*:Todo*/\n  ) => {\n    dispatch({\n      type: \"delete\",\n      payload: todo\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"header\", null, __jsx(\"h2\", null, \"To Do List\")), __jsx(\"main\", null, __jsx(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      add(state.currentTodo);\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: state.currentTodo,\n    onChange: event => {\n      dispatch({\n        type: \"set-current\",\n        payload: event.target.value\n      });\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"ul\", null, state.todos.map(todo => {\n    return __jsx(\"li\", {\n      key: todo.id\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: todo.name,\n      onChange: event => {\n        edit(_objectSpread(_objectSpread({}, todo), {}, {\n          name: event.target.value\n        }));\n      }\n    }), __jsx(\"button\", {\n      onClick: () => {\n        del(todo);\n      }\n    }, \"Delete\"));\n  }))));\n};\n\nexport async function getServerSideProps() {\n  let result;\n\n  try {\n    // Fetch our list from the server\n    result = await API.graphql(graphqlOperation(listTodos));\n  } catch (err) {\n    console.warn(\"ERR\", err);\n    return {\n      props: {\n        todos: []\n      }\n    };\n  }\n\n  if (result.errors) {\n    console.warn(\"Failed to fetch listTodos. \", result.errors);\n    return {\n      props: {\n        todos: []\n      }\n    };\n  }\n\n  if (result.data.getTodoList !== null) {\n    return {\n      props: {\n        todos: result.data.listTodos.items\n      }\n    };\n  }\n}\nexport default App;","map":null,"metadata":{},"sourceType":"module"}