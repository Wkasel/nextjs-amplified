{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/rozar/Documents/todo-list/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport reducer from './reducer';\nimport { nanoid } from 'nanoid';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\nAPI.configure(config); // Should be a device id or a cognito user id but this will do\n\nvar MY_ID = nanoid();\n\nvar App = function App(_ref) {\n  _s();\n\n  var todos = _ref.todos;\n\n  // The reducer defined before\n  var _React$useReducer = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos: todos\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var listener = API.graphql(graphqlOperation(onCreateTodo));\n    console.log('LISTENER', listener);\n    var subscription = listener.subscribe(function (v) {\n      console.log('V', v);\n      if (v.value.data.onCreateTodo.userId === MY_ID) return;\n      dispatch({\n        type: \"add\",\n        payload: v.value.data.onCreateTodo\n      });\n    });\n    console.log(subscription);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  var add = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var todo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              todo = {\n                id: nanoid(),\n                name: state.currentTodo,\n                completed: false,\n                createdAt: \"\".concat(Date.now())\n              };\n              dispatch({\n                type: \"add\",\n                payload: todo\n              }); // Optimistic update\n\n              dispatch({\n                type: \"set-current\",\n                payload: \"\"\n              });\n              _context.prev = 3;\n              _context.next = 6;\n              return API.graphql(graphqlOperation(createTodo, {\n                input: _objectSpread(_objectSpread({}, todo), {}, {\n                  todoTodoListId: \"global\",\n                  userId: MY_ID\n                })\n              }));\n\n            case 6:\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](3);\n              // With revert on error\n              dispatch({\n                type: \"set-current\",\n                payload: todo.name\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 8]]);\n    }));\n\n    return function add() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var edit = function edit(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"update\",\n      payload: todo\n    });\n  };\n\n  var del = function del(todo\n  /*:Todo*/\n  ) {\n    dispatch({\n      type: \"delete\",\n      payload: todo\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"To Do List\")), __jsx(\"main\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      add(state.currentTodo);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: state.currentTodo,\n    onChange: function onChange(event) {\n      dispatch({\n        type: \"set-current\",\n        payload: event.target.value\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Add\")), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, state.todos.map(function (todo) {\n    return __jsx(\"li\", {\n      key: todo.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: todo.name,\n      onChange: function onChange(event) {\n        edit(_objectSpread(_objectSpread({}, todo), {}, {\n          name: event.target.value\n        }));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      onClick: function onClick() {\n        del(todo);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, \"Delete\"));\n  }))));\n};\n\n_s(App, \"tpqFKrQaX6UYy0gUDBok6g3s5wc=\");\n\n_c = App;\n;\nexport var __N_SSP = true;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rozar/Documents/todo-list/pages/index.js"],"names":["React","reducer","nanoid","API","graphqlOperation","config","createTodo","onCreateTodo","configure","MY_ID","App","todos","useReducer","currentTodo","state","dispatch","useEffect","listener","graphql","console","log","subscription","subscribe","v","value","data","userId","type","payload","unsubscribe","add","todo","id","name","completed","createdAt","Date","now","input","todoTodoListId","edit","del","event","preventDefault","target","map"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,YAAT,QAA6B,8BAA7B;AAEAJ,GAAG,CAACK,SAAJ,CAAcH,MAAd,E,CACA;;AACA,IAAMI,KAAK,GAAGP,MAAM,EAApB;;AAEA,IAAMQ,GAAG,GAAG,SAANA,GAAM,OAAa;AAAA;;AAAA,MAAXC,KAAW,QAAXA,KAAW;;AACvB;AADuB,0BAEGX,KAAK,CAACY,UAAN,CAAiBX,OAAjB,EAA0B;AAClDY,IAAAA,WAAW,EAAE,EADqC;AAElDF,IAAAA,KAAK,EAALA;AAFkD,GAA1B,CAFH;AAAA;AAAA,MAEhBG,KAFgB;AAAA,MAETC,QAFS;;AAMvBf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AACpB,QAAMC,QAAQ,GAAGd,GAAG,CAACe,OAAJ,CAAYd,gBAAgB,CAACG,YAAD,CAA5B,CAAjB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB;AACA,QAAMI,YAAY,GAAGJ,QAAQ,CAACK,SAAT,CAAmB,UAAAC,CAAC,EAAI;AAC3CJ,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBG,CAAjB;AACA,UAAIA,CAAC,CAACC,KAAF,CAAQC,IAAR,CAAalB,YAAb,CAA0BmB,MAA1B,KAAqCjB,KAAzC,EAAgD;AAChDM,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,OAAO,EAAEL,CAAC,CAACC,KAAF,CAAQC,IAAR,CAAalB;AAArC,OAAD,CAAR;AACD,KAJoB,CAArB;AAKAY,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,WAAO,YAAM;AACXA,MAAAA,YAAY,CAACQ,WAAb;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;;AAaA,MAAMC,GAAG;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,cAAAA,IADI,GACG;AACXC,gBAAAA,EAAE,EAAE9B,MAAM,EADC;AAEX+B,gBAAAA,IAAI,EAAEnB,KAAK,CAACD,WAFD;AAGXqB,gBAAAA,SAAS,EAAE,KAHA;AAIXC,gBAAAA,SAAS,YAAKC,IAAI,CAACC,GAAL,EAAL;AAJE,eADH;AAOVtB,cAAAA,QAAQ,CAAC;AACPY,gBAAAA,IAAI,EAAE,KADC;AAEPC,gBAAAA,OAAO,EAAEG;AAFF,eAAD,CAAR,CAPU,CAWV;;AACAhB,cAAAA,QAAQ,CAAC;AAAEY,gBAAAA,IAAI,EAAE,aAAR;AAAuBC,gBAAAA,OAAO,EAAE;AAAhC,eAAD,CAAR;AAZU;AAAA;AAAA,qBAcFzB,GAAG,CAACe,OAAJ,CACJd,gBAAgB,CAACE,UAAD,EAAa;AAC3BgC,gBAAAA,KAAK,kCAAOP,IAAP;AAAaQ,kBAAAA,cAAc,EAAE,QAA7B;AAAuCb,kBAAAA,MAAM,EAAEjB;AAA/C;AADsB,eAAb,CADZ,CAdE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBR;AACAM,cAAAA,QAAQ,CAAC;AAAEY,gBAAAA,IAAI,EAAE,aAAR;AAAuBC,gBAAAA,OAAO,EAAEG,IAAI,CAACE;AAArC,eAAD,CAAR;;AArBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHH,GAAG;AAAA;AAAA;AAAA,KAAT;;AAwBA,MAAMU,IAAI,GAAG,SAAPA,IAAO,CAACT;AAAK;AAAN,IAAoB;AAC/BhB,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEG;AAA3B,KAAD,CAAR;AACD,GAFD;;AAGA,MAAMU,GAAG,GAAG,SAANA,GAAM,CAACV;AAAK;AAAN,IAAoB;AAC9BhB,IAAAA,QAAQ,CAAC;AAAEY,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,OAAO,EAAEG;AAA3B,KAAD,CAAR;AACD,GAFD;;AAGA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,QAAQ,EAAE,kBAAAW,KAAK,EAAI;AACjBA,MAAAA,KAAK,CAACC,cAAN;AACAb,MAAAA,GAAG,CAAChB,KAAK,CAACD,WAAP,CAAH;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEC,KAAK,CAACD,WAFf;AAGE,IAAA,QAAQ,EAAE,kBAAA6B,KAAK,EAAI;AACjB3B,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,OAAO,EAAEc,KAAK,CAACE,MAAN,CAAapB;AAA7C,OAAD,CAAR;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAaE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAbF,CADF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,KAAK,CAACH,KAAN,CAAYkC,GAAZ,CAAgB,UAAAd,IAAI,EAAI;AACvB,WACE;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAE,MADR;AAEE,MAAA,KAAK,EAAED,IAAI,CAACE,IAFd;AAGE,MAAA,QAAQ,EAAE,kBAAAS,KAAK,EAAI;AACjBF,QAAAA,IAAI,iCAAMT,IAAN;AAAYE,UAAAA,IAAI,EAAES,KAAK,CAACE,MAAN,CAAapB;AAA/B,WAAJ;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE;AACE,MAAA,OAAO,EAAE,mBAAM;AACbiB,QAAAA,GAAG,CAACV,IAAD,CAAH;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,CADF;AAkBD,GAnBA,CADH,CAhBF,CAJF,CADF;AA8CD,CA/FD;;GAAMrB,G;;KAAAA,G;AAiHL;;AAED,eAAeA,GAAf","sourcesContent":["import * as React from \"react\";\nimport reducer from './reducer'\nimport { nanoid } from 'nanoid'\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { listTodos } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\n\nAPI.configure(config);\n// Should be a device id or a cognito user id but this will do\nconst MY_ID = nanoid();\n\nconst App = ({todos}) => {\n  // The reducer defined before\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos\n  });\n  React.useEffect(() => {\n    const listener = API.graphql(graphqlOperation(onCreateTodo));\n    console.log('LISTENER', listener)\n    const subscription = listener.subscribe(v => {\n      console.log('V', v)\n      if (v.value.data.onCreateTodo.userId === MY_ID) return;\n      dispatch({ type: \"add\", payload: v.value.data.onCreateTodo });\n    });\n    console.log(subscription)\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const add = async () => {\n    const todo = {\n      id: nanoid(),\n      name: state.currentTodo,\n      completed: false,\n      createdAt: `${Date.now()}`\n    };\n    dispatch({\n      type: \"add\",\n      payload: todo\n    });\n    // Optimistic update\n    dispatch({ type: \"set-current\", payload: \"\" });\n    try {\n      await API.graphql(\n        graphqlOperation(createTodo, {\n          input: { ...todo, todoTodoListId: \"global\", userId: MY_ID }\n        })\n      );\n    } catch (err) {\n      // With revert on error\n      dispatch({ type: \"set-current\", payload: todo.name });\n    }\n  };\n  const edit = (todo /*:Todo*/) => {\n    dispatch({ type: \"update\", payload: todo });\n  };\n  const del = (todo /*:Todo*/) => {\n    dispatch({ type: \"delete\", payload: todo });\n  };\n  return (\n    <>\n      <header>\n        <h2>To Do List</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={event => {\n            event.preventDefault();\n            add(state.currentTodo);\n          }}\n        >\n          <input\n            type=\"text\"\n            value={state.currentTodo}\n            onChange={event => {\n              dispatch({ type: \"set-current\", payload: event.target.value });\n            }}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ul>\n          {state.todos.map(todo => {\n            return (\n              <li key={todo.id}>\n                <input\n                  type={\"text\"}\n                  value={todo.name}\n                  onChange={event => {\n                    edit({ ...todo, name: event.target.value });\n                  }}\n                />\n                <button\n                  onClick={() => {\n                    del(todo);\n                  }}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport async function getServerSideProps() {\n  let result;\n  try {\n    // Fetch our list from the server\n    result = await API.graphql(graphqlOperation(listTodos));\n  } catch (err) {\n    console.warn('ERR', err);\n    return { props: { todos: [] }};\n  }\n  if (result.errors) {\n    console.warn(\"Failed to fetch listTodos. \", result.errors);\n    return { props: { todos: [] }};\n  }\n  if (result.data.getTodoList !== null) {\n    return { props: { todos: result.data.listTodos.items }};\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}