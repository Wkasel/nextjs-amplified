{"ast":null,"code":"var _jsxFileName = \"/home/rozar/Documents/todo-list/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport reducer from './reducer';\nimport { nanoid } from 'nanoid';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { listTodos } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\nAPI.configure(config); // Should be a device id or a cognito user id but this will do\n\nconst MY_ID = nanoid();\n\nconst App = ({\n  todos\n}) => {\n  // The reducer defined before\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos\n  });\n  React.useEffect(() => {\n    const listener = API.graphql(graphqlOperation(onCreateTodo));\n    console.log('LISTENER', listener);\n    const subscription = listener.subscribe(v => {\n      console.log('V', v);\n      dispatch({\n        type: \"add\",\n        payload: v.value.data.onCreateTodo\n      });\n    });\n    console.log(subscription);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const add = async () => {\n    const todo = {\n      id: nanoid(),\n      name: state.currentTodo,\n      completed: false,\n      createdAt: `${Date.now()}`\n    };\n    dispatch({\n      type: \"add\",\n      payload: todo\n    }); // Optimistic update\n\n    dispatch({\n      type: \"set-current\",\n      payload: \"\"\n    });\n\n    try {\n      await API.graphql(graphqlOperation(createTodo, {\n        input: _objectSpread(_objectSpread({}, todo), {}, {\n          todoTodoListId: \"global\",\n          userId: MY_ID\n        })\n      }));\n    } catch (err) {\n      // With revert on error\n      dispatch({\n        type: \"set-current\",\n        payload: todo.name\n      });\n    }\n  };\n\n  const edit = (todo\n  /*:Todo*/\n  ) => {\n    dispatch({\n      type: \"update\",\n      payload: todo\n    });\n  };\n\n  const del = (todo\n  /*:Todo*/\n  ) => {\n    dispatch({\n      type: \"delete\",\n      payload: todo\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"To Do List\")), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      add(state.currentTodo);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    value: state.currentTodo,\n    onChange: event => {\n      dispatch({\n        type: \"set-current\",\n        payload: event.target.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Add\")), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, state.todos.map(todo => {\n    return __jsx(\"li\", {\n      key: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, __jsx(\"input\", {\n      type: \"text\",\n      value: todo.name,\n      onChange: event => {\n        edit(_objectSpread(_objectSpread({}, todo), {}, {\n          name: event.target.value\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), __jsx(\"button\", {\n      onClick: () => {\n        del(todo);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"Delete\"));\n  }))));\n};\n\nexport async function getServerSideProps() {\n  let result;\n\n  try {\n    // Fetch our list from the server\n    result = await API.graphql(graphqlOperation(listTodos));\n  } catch (err) {\n    console.warn('ERR', err);\n    return {\n      props: {\n        todos: []\n      }\n    };\n  }\n\n  if (result.errors) {\n    console.warn(\"Failed to fetch listTodos. \", result.errors);\n    return {\n      props: {\n        todos: []\n      }\n    };\n  }\n\n  if (result.data.getTodoList !== null) {\n    return {\n      props: {\n        todos: result.data.listTodos.items\n      }\n    };\n  }\n}\n;\nexport default App;","map":{"version":3,"sources":["/home/rozar/Documents/todo-list/pages/index.js"],"names":["React","reducer","nanoid","API","graphqlOperation","config","createTodo","listTodos","onCreateTodo","configure","MY_ID","App","todos","state","dispatch","useReducer","currentTodo","useEffect","listener","graphql","console","log","subscription","subscribe","v","type","payload","value","data","unsubscribe","add","todo","id","name","completed","createdAt","Date","now","input","todoTodoListId","userId","err","edit","del","event","preventDefault","target","map","getServerSideProps","result","warn","props","errors","getTodoList","items"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport reducer from './reducer'\nimport { nanoid } from 'nanoid'\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport config from \"../src/aws-exports\";\nimport { createTodo } from \"../src/graphql/mutations\";\nimport { listTodos } from \"../src/graphql/queries\";\nimport { onCreateTodo } from \"../src/graphql/subscriptions\";\n\nAPI.configure(config);\n// Should be a device id or a cognito user id but this will do\nconst MY_ID = nanoid();\n\nconst App = ({todos}) => {\n  // The reducer defined before\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentTodo: \"\",\n    todos\n  });\n  React.useEffect(() => {\n    const listener = API.graphql(graphqlOperation(onCreateTodo));\n    console.log('LISTENER', listener)\n    const subscription = listener.subscribe(v => {\n      console.log('V', v)\n      dispatch({ type: \"add\", payload: v.value.data.onCreateTodo });\n    });\n    console.log(subscription)\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  const add = async () => {\n    const todo = {\n      id: nanoid(),\n      name: state.currentTodo,\n      completed: false,\n      createdAt: `${Date.now()}`\n    };\n    dispatch({\n      type: \"add\",\n      payload: todo\n    });\n    // Optimistic update\n    dispatch({ type: \"set-current\", payload: \"\" });\n    try {\n      await API.graphql(\n        graphqlOperation(createTodo, {\n          input: { ...todo, todoTodoListId: \"global\", userId: MY_ID }\n        })\n      );\n    } catch (err) {\n      // With revert on error\n      dispatch({ type: \"set-current\", payload: todo.name });\n    }\n  };\n  const edit = (todo /*:Todo*/) => {\n    dispatch({ type: \"update\", payload: todo });\n  };\n  const del = (todo /*:Todo*/) => {\n    dispatch({ type: \"delete\", payload: todo });\n  };\n  return (\n    <>\n      <header>\n        <h2>To Do List</h2>\n      </header>\n      <main>\n        <form\n          onSubmit={event => {\n            event.preventDefault();\n            add(state.currentTodo);\n          }}\n        >\n          <input\n            type=\"text\"\n            value={state.currentTodo}\n            onChange={event => {\n              dispatch({ type: \"set-current\", payload: event.target.value });\n            }}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        <ul>\n          {state.todos.map(todo => {\n            return (\n              <li key={todo.id}>\n                <input\n                  type={\"text\"}\n                  value={todo.name}\n                  onChange={event => {\n                    edit({ ...todo, name: event.target.value });\n                  }}\n                />\n                <button\n                  onClick={() => {\n                    del(todo);\n                  }}\n                >\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport async function getServerSideProps() {\n  let result;\n  try {\n    // Fetch our list from the server\n    result = await API.graphql(graphqlOperation(listTodos));\n  } catch (err) {\n    console.warn('ERR', err);\n    return { props: { todos: [] }};\n  }\n  if (result.errors) {\n    console.warn(\"Failed to fetch listTodos. \", result.errors);\n    return { props: { todos: [] }};\n  }\n  if (result.data.getTodoList !== null) {\n    return { props: { todos: result.data.listTodos.items }};\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}